@using AnimeCharacters.Helpers
@using AnimeCharacters.Models
@inherits AnimeCharacters.Pages.BasePage
@implements EventAggregator.Blazor.IHandle<Events.DatabaseEvent>

<div class="item">
    <div class="row">
        <div class="col" @onclick="_OnAnimeClicked">
            <img src="@(CharacterAnime?.AnimeImageUrl ?? "#")" />
        </div>
    </div>
    <div class="row">
        <div class="col" @onclick="_OnCharacterClicked">
            <img src="@(CharacterAnime?.VoiceActingRole?.Image?.GetOptimalImage() ?? "#")" />
        </div>
    </div>
    <div class="row">
        <div class="col" @onclick="_OnAnimeClicked">
            <div class="text-md-center text-primary">@GetDisplayTitle()</div>
        </div>
    </div>
    <div class="row">
        <div class="col" @onclick="_OnCharacterClicked">
            <div class="text-md-center text-secondary">@(CharacterAnime?.VoiceActingRole?.Name?.Full ?? "Loading...")</div>
        </div>
    </div>
</div>

@code
{
    [Parameter]
    public Models.CharacterAnimeModel CharacterAnime { get; set; } = null;

    [Parameter]
    public EventCallback OnAnimeClicked { get; set; }

    [Parameter]
    public EventCallback OnCharacterClicked { get; set; }

    private UserSettings _userSettings;

    protected override async Task OnInitializedAsync()
    {
        _userSettings = await DatabaseProvider.GetUserSettingsAsync() ?? new UserSettings();
        await base.OnInitializedAsync();
    }

    private string GetDisplayTitle()
    {
        if (_userSettings == null) return CharacterAnime?.VoiceActingRole?.Media?.FirstOrDefault()?.Title?.UserPreferred ?? "Loading...";
        var media = CharacterAnime?.VoiceActingRole?.Media?.FirstOrDefault();
        return TitleHelper.GetPreferredTitle(media, _userSettings.PreferredTitleType);
    }

    void _OnAnimeClicked()
    {
        OnAnimeClicked.InvokeAsync();
    }

    void _OnCharacterClicked()
    {
        OnCharacterClicked.InvokeAsync();
    }

    public async Task HandleAsync(Events.DatabaseEvent arg)
    {
        _userSettings = await DatabaseProvider.GetUserSettingsAsync() ?? new UserSettings();
        StateHasChanged();
    }
}