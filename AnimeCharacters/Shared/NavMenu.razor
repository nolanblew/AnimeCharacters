@inherits Pages.BasePage
@implements EventAggregator.Blazor.IHandle<Events.DatabaseEvent>
@implements EventAggregator.Blazor.IHandle<Events.PageStateManagerEvent>


<nav class="navbar navbar-expand-sm navbar-light bg-light">
    @if (PageStateManager.CanGoBack)
    {
        <div class="nav-item" style="display: flex; align-items: center;" @onclick="_GoBack">
            <a class="nav-link">
                <svg style="display: flex; align-items: center" xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-arrow-left" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M15 8a.5.5 0 0 0-.5-.5H2.707l3.147-3.146a.5.5 0 1 0-.708-.708l-4 4a.5.5 0 0 0 0 .708l4 4a.5.5 0 0 0 .708-.708L2.707 8.5H14.5A.5.5 0 0 0 15 8z" />
                </svg>
            </a>
        </div>
    }
    <a class="navbar-brand" href="#">
        <img src="/icon-512.png" width="30" height="30" alt="Anime Characters" />
        Anime Characters
    </a>

    @if (IsLoggedIn)
    {
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>

        <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <ul class="navbar-nav mr-auto">
                <li class="nav-item">
                    <a class="nav-link" href="/animes">Animes <span class="sr-only">(current)</span></a>
                </li>
            </ul>
            <span class="navbar-text">
                Hello, <a href="/profile-settings" class="username-link">@CurrentUser?.Name</a>!
            </span>
            <div class="nav-item">
                <a class="nav-link" @onclick="_Logout">Logout</a>
            </div>
            @*<div class="nav-item">
                <a class="nav-link text-muted" href="#">Settings</a>
            </div>*@
        </div>
    }
</nav>

@code {
    protected override async Task OnInitializedAsync()
    {
        await _SetUser();
        await base.OnInitializedAsync();
    }

    public Kitsu.Models.User CurrentUser { get; set; }

    public bool IsLoggedIn => CurrentUser != null;

    public async Task HandleAsync(Events.DatabaseEvent arg)
    {
        await _SetUser();
        StateHasChanged();
    }

    public Task HandleAsync(Events.PageStateManagerEvent arg)
    {
        StateHasChanged();
        return Task.CompletedTask;
    }

    void _GoBack()
    {
        if (PageStateManager.CanGoBack)
        {
            NavigationManager.NavigateTo(PageStateManager.GoBack());
        }
    }

    void _Logout()
    {
        NavigationManager.NavigateTo("/?logout=true");
        PageStateManager.Clear();
    }

    async Task _SetUser() =>  CurrentUser = await DatabaseProvider.GetUserAsync();
}
