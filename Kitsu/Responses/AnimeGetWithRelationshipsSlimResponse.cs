// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Kitsu.Responses;
//
//    var animeGetWithRelationshipsSlimResponse = AnimeGetWithRelationshipsSlimResponse.FromJson(jsonString);
using System;
using System.Collections.Generic;

using System.Globalization;
using System.Linq;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Kitsu.Responses
{
    public class AnimeGetWithRelationshipsSlimResponse
    {
        public partial class Anime
        {
            [JsonProperty("data", NullValueHandling = NullValueHandling.Ignore)]
            public Data Data { get; set; }

            [JsonProperty("included", NullValueHandling = NullValueHandling.Ignore)]
            public Included[] Included { get; set; }

            public Included[] RelatedAnime => Data.Relationships.MediaRelationships.Data.Select(
                relationship => Included.FirstOrDefault(
                    inc => inc.Type == "anime"
                    && inc.Id == Included.FirstOrDefault(
                        mediaInc => mediaInc.Type == "mediaRelationships"
                            && mediaInc.Id == relationship.Id)?
                        .Relationships.Destination.Data.Id))
                    .Where(a => a != null).ToArray();

            public Included[] Mappings => Data.Relationships?.Mappings?.Data?.Select(
                    relationship => Included.FirstOrDefault(mapping =>
                        mapping.Type == relationship.Type
                        && mapping.Id == relationship.Id))
                .Where(a => a != null).ToArray();
        }

        public partial class Data
        {
            [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
            [JsonConverter(typeof(ParseStringConverter))]
            public long? Id { get; set; }

            [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
            public string Type { get; set; }

            [JsonProperty("links", NullValueHandling = NullValueHandling.Ignore)]
            public DataLinks Links { get; set; }

            [JsonProperty("attributes", NullValueHandling = NullValueHandling.Ignore)]
            public DataAttributes Attributes { get; set; }

            [JsonProperty("relationships", NullValueHandling = NullValueHandling.Ignore)]
            public DataRelationships Relationships { get; set; }
        }

        public partial class DataAttributes
        {
            [JsonProperty("canonicalTitle", NullValueHandling = NullValueHandling.Ignore)]
            public string CanonicalTitle { get; set; }

            [JsonProperty("posterImage", NullValueHandling = NullValueHandling.Ignore)]
            public PosterImage PosterImage { get; set; }

            [JsonProperty("slug", NullValueHandling = NullValueHandling.Ignore)]
            public string Slug { get; set; }

            [JsonProperty("youtubeVideoId", NullValueHandling = NullValueHandling.Ignore)]
            public string YoutubeVideoId { get; set; }

            [JsonProperty("showType", NullValueHandling = NullValueHandling.Ignore)]
            public string ShowType { get; set; }
        }

        public partial class PosterImage
        {
            [JsonProperty("tiny", NullValueHandling = NullValueHandling.Ignore)]
            public Uri Tiny { get; set; }

            [JsonProperty("small", NullValueHandling = NullValueHandling.Ignore)]
            public Uri Small { get; set; }

            [JsonProperty("medium", NullValueHandling = NullValueHandling.Ignore)]
            public Uri Medium { get; set; }

            [JsonProperty("large", NullValueHandling = NullValueHandling.Ignore)]
            public Uri Large { get; set; }

            [JsonProperty("original", NullValueHandling = NullValueHandling.Ignore)]
            public Uri Original { get; set; }

            [JsonProperty("meta", NullValueHandling = NullValueHandling.Ignore)]
            public Meta Meta { get; set; }
        }

        public partial class Meta
        {
            [JsonProperty("dimensions", NullValueHandling = NullValueHandling.Ignore)]
            public Dimensions Dimensions { get; set; }
        }

        public partial class Dimensions
        {
            [JsonProperty("tiny", NullValueHandling = NullValueHandling.Ignore)]
            public Large Tiny { get; set; }

            [JsonProperty("small", NullValueHandling = NullValueHandling.Ignore)]
            public Large Small { get; set; }

            [JsonProperty("medium", NullValueHandling = NullValueHandling.Ignore)]
            public Large Medium { get; set; }

            [JsonProperty("large", NullValueHandling = NullValueHandling.Ignore)]
            public Large Large { get; set; }
        }

        public partial class Large
        {
            [JsonProperty("width")]
            public long? Width { get; set; }

            [JsonProperty("height")]
            public long? Height { get; set; }
        }

        public partial class DataLinks
        {
            [JsonProperty("self", NullValueHandling = NullValueHandling.Ignore)]
            public Uri Self { get; set; }
        }

        public partial class DataRelationships
        {
            [JsonProperty("mappings", NullValueHandling = NullValueHandling.Ignore)]
            public Mappings Mappings { get; set; }

            [JsonProperty("mediaRelationships", NullValueHandling = NullValueHandling.Ignore)]
            public Mappings MediaRelationships { get; set; }
        }

        public partial class Mappings
        {
            [JsonProperty("links", NullValueHandling = NullValueHandling.Ignore)]
            public MappingsLinks Links { get; set; }

            [JsonProperty("data", NullValueHandling = NullValueHandling.Ignore)]
            public Dat[] Data { get; set; }
        }

        public partial class Dat
        {
            [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
            public string Type { get; set; }

            [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
            [JsonConverter(typeof(ParseStringConverter))]
            public long? Id { get; set; }
        }

        public partial class MappingsLinks
        {
            [JsonProperty("self", NullValueHandling = NullValueHandling.Ignore)]
            public Uri Self { get; set; }

            [JsonProperty("related", NullValueHandling = NullValueHandling.Ignore)]
            public Uri Related { get; set; }
        }

        public partial class Included
        {
            [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
            [JsonConverter(typeof(ParseStringConverter))]
            public long? Id { get; set; }

            [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
            public string Type { get; set; }

            [JsonProperty("links", NullValueHandling = NullValueHandling.Ignore)]
            public DataLinks Links { get; set; }

            [JsonProperty("attributes", NullValueHandling = NullValueHandling.Ignore)]
            public IncludedAttributes Attributes { get; set; }

            [JsonProperty("relationships", NullValueHandling = NullValueHandling.Ignore)]
            public IncludedRelationships Relationships { get; set; }
        }

        public partial class IncludedAttributes
        {
            [JsonProperty("canonicalTitle", NullValueHandling = NullValueHandling.Ignore)]
            public string CanonicalTitle { get; set; }

            [JsonProperty("posterImage", NullValueHandling = NullValueHandling.Ignore)]
            public PosterImage PosterImage { get; set; }

            [JsonProperty("youtubeVideoId", NullValueHandling = NullValueHandling.Ignore)]
            public string YoutubeVideoId { get; set; }

            [JsonProperty("slug", NullValueHandling = NullValueHandling.Ignore)]
            public string Slug { get; set; }

            [JsonProperty("showType", NullValueHandling = NullValueHandling.Ignore)]
            public string ShowType { get; set; }

            [JsonProperty("createdAt")]
            public DateTimeOffset? CreatedAt { get; set; }

            [JsonProperty("updatedAt")]
            public DateTimeOffset? UpdatedAt { get; set; }

            [JsonProperty("externalSite", NullValueHandling = NullValueHandling.Ignore)]
            public string ExternalSite { get; set; }

            [JsonProperty("externalId", NullValueHandling = NullValueHandling.Ignore)]
            public string ExternalId { get; set; }

            [JsonProperty("role", NullValueHandling = NullValueHandling.Ignore)]
            public string Role { get; set; }
        }

        public partial class IncludedRelationships
        {
            [JsonProperty("mappings", NullValueHandling = NullValueHandling.Ignore)]
            public Item Mappings { get; set; }

            [JsonProperty("mediaRelationships", NullValueHandling = NullValueHandling.Ignore)]
            public Item MediaRelationships { get; set; }

            [JsonProperty("item", NullValueHandling = NullValueHandling.Ignore)]
            public Item Item { get; set; }

            [JsonProperty("source", NullValueHandling = NullValueHandling.Ignore)]
            public Item Source { get; set; }

            [JsonProperty("destination", NullValueHandling = NullValueHandling.Ignore)]
            public Destination Destination { get; set; }
        }

        public partial class Destination
        {
            [JsonProperty("links", NullValueHandling = NullValueHandling.Ignore)]
            public MappingsLinks Links { get; set; }

            [JsonProperty("data", NullValueHandling = NullValueHandling.Ignore)]
            public Dat Data { get; set; }
        }

        public partial class Item
        {
            [JsonProperty("links", NullValueHandling = NullValueHandling.Ignore)]
            public MappingsLinks Links { get; set; }
        }

        public partial class Anime
        {
            public static Anime FromJson(string json) => JsonConvert.DeserializeObject<Anime>(json, Kitsu.Responses.AnimeGetWithRelationshipsSlimResponse.Converter.Settings);
        }

        internal static class Converter
        {
            public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
            {
                MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
                DateParseHandling = DateParseHandling.None,
                Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
            };
        }

        internal class ParseStringConverter : JsonConverter
        {
            public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

            public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
            {
                if (reader.TokenType == JsonToken.Null) return null;
                var value = serializer.Deserialize<string>(reader);
                long l;
                if (Int64.TryParse(value, out l))
                {
                    return l;
                }
                throw new Exception("Cannot unmarshal type long?");
            }

            public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
            {
                if (untypedValue == null)
                {
                    serializer.Serialize(writer, null);
                    return;
                }
                var value = (long?)untypedValue;
                serializer.Serialize(writer, value.ToString());
                return;
            }

            public static readonly ParseStringConverter Singleton = new ParseStringConverter();
        }
    }
}
