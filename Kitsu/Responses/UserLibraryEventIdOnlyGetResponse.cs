// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Kitsu.Responses;
//
//    var userLibraryEventIdOnlyGetResponse = UserLibraryEventIdOnlyGetResponse.FromJson(jsonString);

namespace Kitsu.Responses
{
    using Newtonsoft.Json;
    using static Kitsu.Converters.Converter;

    public partial class UserLibraryEventIdOnlyGetResponse
    {
        [JsonProperty("data", NullValueHandling = NullValueHandling.Ignore)]
        public Datum[] Data { get; set; }

        [JsonProperty("meta", NullValueHandling = NullValueHandling.Ignore)]
        public Meta MetaData { get; set; }

        public partial class Datum
        {
            [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
            [JsonConverter(typeof(ParseStringConverter))]
            public long Id { get; set; }

            [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
            public string Type { get; set; }
        }

        public partial class Meta
        {
            [JsonProperty("count", NullValueHandling = NullValueHandling.Ignore)]
            public long? Count { get; set; }
        }

        public static UserLibraryEventIdOnlyGetResponse FromJson(string json) => JsonConvert.DeserializeObject<UserLibraryEventIdOnlyGetResponse>(json, Kitsu.Converters.Converter.Settings);
    }
}
